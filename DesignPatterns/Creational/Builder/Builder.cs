using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


/// <summary>
/// Builder pattern builds a complex object by using a step by step approach. 
/// Builder interface defines the steps to build the final object.
/// This builder is independent from the objects creation process.
/// A class that is known as Director, controls the object creation process.
/// Moreover, builder pattern describes a way to separate an object from its construction.
/// The same construction method can create different representation of the object.
/// 
/// 1. Builder: This is an interface which is used to define all the steps to create a product
/// 2. ConcreteBuilder - This is a class which implements the Builder interface to create complex product.
/// 3. Product - This is a class which defines the parts of the complex object which are to be generated by the builder pattern.
/// 4. Director - This is a class which is used to construct an object using the Builder interface.
/// </summary>

namespace DesignPatterns.Creational.Builder
{
    public interface IBuilder
    {
        void BuildPart1();
        void BuildPart2();
        void BuildPart3();
        Product GetProduct();
    }

    public class ConcreteBuilder : IBuilder
    {
        private Product _product = new Product();

        public void BuildPart1()
        {
            _product.Part1 = "Part 1";
        }

        public void BuildPart2()
        {
            _product.Part2 = "Part 2";
        }

        public void BuildPart3()
        {
            _product.Part3 = "Part 3";
        }

        public Product GetProduct()
        {
            return _product;
        }
    }

    public class Product
    {
        public string Part1 { get; set; }
        public string Part2 { get; set; }
        public string Part3 { get; set; }
    }

    public class Director
    {
        public void Construct(IBuilder IBuilder)
        {
            IBuilder.BuildPart1();
            IBuilder.BuildPart2();
            IBuilder.BuildPart3();
        }
    }
}
